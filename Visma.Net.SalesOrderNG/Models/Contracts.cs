//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"

namespace Visma.Net.SalesOrderNG.Models
{
    using System = global::System;

    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddSalesOrderLinesCommand
    {
        [Newtonsoft.Json.JsonProperty("lines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NewSalesOrderLineDto> Lines { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddressDto
    {
        /// <summary>
        /// The address id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        /// <summary>
        /// Whether this address overrides the default address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("overridesDefault", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool OverridesDefault { get; set; }

        /// <summary>
        /// Address line 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("line1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Line1 { get; set; }

        /// <summary>
        /// Address line 2
        /// </summary>
        [Newtonsoft.Json.JsonProperty("line2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Line2 { get; set; }

        /// <summary>
        /// Address line 3
        /// </summary>
        [Newtonsoft.Json.JsonProperty("line3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Line3 { get; set; }

        /// <summary>
        /// The postal code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }

        /// <summary>
        /// The city
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CdNamePairDto Country { get; set; }

        [Newtonsoft.Json.JsonProperty("county", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CdNamePairDto County { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AllocationDto
    {
        [Newtonsoft.Json.JsonProperty("inventoryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InventoryId { get; set; }

        [Newtonsoft.Json.JsonProperty("lotSerialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string LotSerialNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Quantity { get; set; }

        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpirationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("allocated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Allocated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AllocationDtoRead
    {
        [Newtonsoft.Json.JsonProperty("inventoryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InventoryId { get; set; }

        [Newtonsoft.Json.JsonProperty("lotSerialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string LotSerialNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Quantity { get; set; }

        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpirationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("allocated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Allocated { get; set; }

        [Newtonsoft.Json.JsonProperty("unitOfMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitOfMeasure { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AttachmentDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("revision", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Revision { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CdDescriptionPairDto
    {
        /// <summary>
        /// The id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CdNamePairDto
    {
        /// <summary>
        /// The id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactDto
    {
        /// <summary>
        /// The id of the contact
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        /// <summary>
        /// Whether this overrides the default contact
        /// </summary>
        [Newtonsoft.Json.JsonProperty("overridesDefault", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool OverridesDefault { get; set; }

        /// <summary>
        /// The name of the contact
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Any attention for the contact
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attention", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Attention { get; set; }

        /// <summary>
        /// The e-mail address of the contact
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// The phone number of the contact
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone1 { get; set; }

        /// <summary>
        /// The secondary phone number of the contact
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone2 { get; set; }

        /// <summary>
        /// The fax number of the contact
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fax { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomFieldsDto
    {
        /// <summary>
        /// A free custom colum of type string with max length 100.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customStr1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomStr1 { get; set; }

        /// <summary>
        /// A free custom colum of type string with max length 100.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customStr2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomStr2 { get; set; }

        /// <summary>
        /// A free custom colum of type string with max length 100.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customStr3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomStr3 { get; set; }

        /// <summary>
        /// A free custom colum of type string with max length 100.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customStr4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomStr4 { get; set; }

        /// <summary>
        /// A free custom colum of type string with max length 100.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customStr5", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomStr5 { get; set; }

        /// <summary>
        /// A free custom colum of type decimal with max 4 decimals.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customDec1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CustomDec1 { get; set; }

        /// <summary>
        /// A free custom colum of type decimal with max 4 decimals.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customDec2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CustomDec2 { get; set; }

        /// <summary>
        /// A free custom colum of type int
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customInt1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CustomInt1 { get; set; }

        /// <summary>
        /// A free custom colum of type int
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customInt2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CustomInt2 { get; set; }

        /// <summary>
        /// A free custom colum of type DateTime - in UTC timezone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customDateTimeUtc1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CustomDateTimeUtc1 { get; set; }

    }

    /// <summary>
    /// The Visma.net.ERP.SalesOrders.Api.Dto.CustomerDto class Defines a customer
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerDto
    {
        /// <summary>
        /// An internal unique id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("internalId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InternalId { get; set; }

        /// <summary>
        /// Unique id for the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The currency Id used by the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyId { get; set; }

        /// <summary>
        /// The class of the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerClassId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerClassId { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultLocation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerLocationDto DefaultLocation { get; set; }

        /// <summary>
        /// The customer's first address line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressLine1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// The customer's second address line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressLine2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// The customer's postal code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }

        /// <summary>
        /// The customer's country code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }

        /// <summary>
        /// The customer's salutation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salutation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Salutation { get; set; }

        /// <summary>
        /// The customer's status code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        [Newtonsoft.Json.JsonProperty("exportType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExportType { get; set; }

        /// <summary>
        /// The customer's EU sales account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salesEuAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalesEuAccountId { get; set; }

        /// <summary>
        /// The customer's non taxable sales account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salesNonTaxableAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalesNonTaxableAccountId { get; set; }

        /// <summary>
        /// The customer's sales account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salesAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalesAccountId { get; set; }

        /// <summary>
        /// The customer's export sales account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salesExportAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalesExportAccountId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerDtoPagedResult
    {
        /// <summary>
        /// Gets or sets the items that are paged
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerDto> Value { get; set; }

        /// <summary>
        /// Gets or sets the link to the next page with more results. If set to null then no more records are present.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPage { get; set; }

        /// <summary>
        /// Gets or sets the total number of items available. If set to null, then the total number of items cannot be determined
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalCount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerLocationDto
    {
        /// <summary>
        /// Location id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Location description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// An internal id of the customer location
        /// </summary>
        [Newtonsoft.Json.JsonProperty("internalId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InternalId { get; set; }

        /// <summary>
        /// The country code of the location
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryId { get; set; }

        /// <summary>
        /// The global localization number of the location
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gln", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gln { get; set; }

        /// <summary>
        /// The tax registration id of the location
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxRegistrationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaxRegistrationId { get; set; }

        /// <summary>
        /// The corporate id of the location
        /// </summary>
        [Newtonsoft.Json.JsonProperty("corporateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorporateId { get; set; }

        /// <summary>
        /// The site id of the location
        /// </summary>
        [Newtonsoft.Json.JsonProperty("warehouseId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WarehouseId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerLocationItemDto
    {
        /// <summary>
        /// Location id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Location description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// An internal id of the customer location
        /// </summary>
        [Newtonsoft.Json.JsonProperty("internalId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InternalId { get; set; }

        /// <summary>
        /// The country code of the location
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryId { get; set; }

        /// <summary>
        /// The global localization number of the location
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gln", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gln { get; set; }

        /// <summary>
        /// The tax registration id of the location
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxRegistrationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaxRegistrationId { get; set; }

        /// <summary>
        /// The corporate id of the location
        /// </summary>
        [Newtonsoft.Json.JsonProperty("corporateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorporateId { get; set; }

        /// <summary>
        /// The site id of the location
        /// </summary>
        [Newtonsoft.Json.JsonProperty("warehouseId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WarehouseId { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressDto Address { get; set; }

        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactDto Contact { get; set; }

        /// <summary>
        /// Price class
        /// </summary>
        [Newtonsoft.Json.JsonProperty("priceClassId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PriceClassId { get; set; }

        /// <summary>
        /// Default FobPointId
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fobPointId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FobPointId { get; set; }

        /// <summary>
        /// Default ShipTermsId
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipTermsId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipTermsId { get; set; }

        /// <summary>
        /// Default ShipZoneId
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipZoneId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipZoneId { get; set; }

        /// <summary>
        /// The ship via id that represents the carrier and its service to be used for shipping the ordered goods
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipViaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipViaId { get; set; }

        /// <summary>
        /// Default ResidentialDelivery
        /// </summary>
        [Newtonsoft.Json.JsonProperty("residentialDelivery", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ResidentialDelivery { get; set; }

        /// <summary>
        /// Default SaturdayDelivery
        /// </summary>
        [Newtonsoft.Json.JsonProperty("saturdayDelivery", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SaturdayDelivery { get; set; }

        /// <summary>
        /// Default Insurance
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insurance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Insurance { get; set; }

        /// <summary>
        /// Default Priority
        /// </summary>
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Priority { get; set; }

        /// <summary>
        /// Shipping rule of the customer set default for the order
        /// <br/>
        /// <br/>Is one of the following options:
        /// <br/>&lt;list type="bullet"&gt;&lt;item&gt;&lt;term&gt;CancelRemainder: &lt;/term&gt;&lt;description&gt;The ordered quantity should be delivered in one shipment&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;BackOrderAllowed: &lt;/term&gt;&lt;description&gt;The ordered quantity can be delivered in multiple shipments.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;ShipComplete: &lt;/term&gt;&lt;description&gt;The ordered quantity should be delivered in one shipment.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shippingRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShippingRule { get; set; }

        /// <summary>
        /// The preferred shipping warehouse of the customer set default for the order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferredWarehouseId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreferredWarehouseId { get; set; }

        /// <summary>
        /// The number of days required for the shipped goods to reach the customer.
        /// <br/>Used in the calculation of the scheduled shipment date
        /// </summary>
        [Newtonsoft.Json.JsonProperty("leadTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LeadTime { get; set; }

        /// <summary>
        /// The location tax/VAT zone id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxZoneId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaxZoneId { get; set; }

        [Newtonsoft.Json.JsonProperty("exportType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExportType { get; set; }

        /// <summary>
        /// Location EU Sales Account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salesEuAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalesEuAccountId { get; set; }

        /// <summary>
        /// Location non taxable sales account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salesNonTaxableAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalesNonTaxableAccountId { get; set; }

        /// <summary>
        /// Location sales account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salesAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalesAccountId { get; set; }

        /// <summary>
        /// Location export sales account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salesExportAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalesExportAccountId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DtoLink
    {
        /// <summary>
        /// A link to the item in question
        /// </summary>
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmployeeDto
    {
        /// <summary>
        /// The internal unique identifier of the employee
        /// </summary>
        [Newtonsoft.Json.JsonProperty("internalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InternalId { get; set; }

        /// <summary>
        /// The identifier of the employee
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdDescriptionPairDto
    {
        /// <summary>
        /// The id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        /// <summary>
        /// The description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

    }

    /// <summary>
    /// Defines expansion options for the inventory summary endpoint.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InventoryAvailabilityExpansions
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Location")]
        Location = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Attribute")]
        Attribute = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"LotSerial")]
        LotSerial = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 4,

    }

    /// <summary>
    /// Inventory summary for a specific inventory item
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InventoryItemAvailabilityDto
    {
        /// <summary>
        /// The inventory id (InventoryCd)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inventoryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InventoryId { get; set; }

        /// <summary>
        /// The internal Id used by the system to identify the inventory item
        /// </summary>
        [Newtonsoft.Json.JsonProperty("internalId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InternalId { get; set; }

        /// <summary>
        /// The description of the inventory item
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The base unit for the inventory item
        /// </summary>
        [Newtonsoft.Json.JsonProperty("baseUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BaseUnit { get; set; }

        /// <summary>
        /// Warehouse information for the inventory item
        /// </summary>
        [Newtonsoft.Json.JsonProperty("availability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WarehouseAvailabilityDto> Availability { get; set; }

        /// <summary>
        /// Attributes applied to the inventory item
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Attributes { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InventoryItemAvailabilityDtoPagedResult
    {
        /// <summary>
        /// Gets or sets the items that are paged
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<InventoryItemAvailabilityDto> Value { get; set; }

        /// <summary>
        /// Gets or sets the link to the next page with more results. If set to null then no more records are present.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPage { get; set; }

        /// <summary>
        /// Gets or sets the total number of items available. If set to null, then the total number of items cannot be determined
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalCount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KitAssemblyDto
    {
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceNumber { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LocationAvailabilityDto
    {
        /// <summary>
        /// The internal id used by the sytem for this location
        /// </summary>
        [Newtonsoft.Json.JsonProperty("internalLocationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InternalLocationId { get; set; }

        /// <summary>
        /// The location id (LocationCd) for this location
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocationId { get; set; }

        /// <summary>
        /// The description of the location
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Physical quantity on-hand of items in the specific location
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantityOnHand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double QuantityOnHand { get; set; }

        /// <summary>
        /// You can configure the way this estimated quantity is calculated by using availability
        /// <br/>calculation rules. The available quantity may include anticipated transactions and therefore
        /// <br/>may be less than or greater than the QuantityOnHand. Anticipated transactions correspond
        /// <br/>to the documents and transactions that have been entered in the system but not yet
        /// <br/>processed to the end.
        /// <br/>In the availability calculation settings of an item class, you specify which anticipated
        /// <br/>transactions affect the available quantity. Thus, the available quantity may include
        /// <br/>goods on purchase orders and exclude the goods allocated for sales orders. You can use
        /// <br/>the available quantity as an indicator of demand.
        /// <br/>Note: For quantities on warehouse location level, only quantities added specifically for the location are taken into consideration in quantityAvailable
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantityAvailable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double QuantityAvailable { get; set; }

        /// <summary>
        /// The quantity stored at locations not included in the availability calculation.
        /// <br/>For each warehouse location, the 'Include in Qty. Available' check box on the
        /// <br/>Warehouses(IN204000) screen defines whether the quantity of items stored at this
        /// <br/>location is included in the quantity of available items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantityNotAvailable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double QuantityNotAvailable { get; set; }

        /// <summary>
        /// Estimated quantity calculated by using the following formula: the QuantityOnHand minus the quantity on unreleased inventory
        /// <br/>issues, minus the quantity allocated for shipping. Thus, the QuantityAvailableForShipment can be less than the QuantityOnHand.
        /// <br/>Note: For quantities on warehouse location level, only quantities added specifically for the location are taken into consideration in quantityAvailableForShipment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantityAvailableForShipment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double QuantityAvailableForShipment { get; set; }

        /// <summary>
        /// The quantity of the inventory item included in open purchase orders.
        /// <br/>Note: For quantities on warehouse location level, only quantities added specifically for the location are taken into consideration
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantityPurchaseOrders", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double QuantityPurchaseOrders { get; set; }

        /// <summary>
        /// Date and time this entry for this location was modified
        /// <br/>Unless a specific time zone offset is included (e.g. '2012-12-24T12:15:14+02:00'), the date is considered to be in the UTC time zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset LastModified { get; set; }

        /// <summary>
        /// LOT/Serial information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lotSerials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LotSerialAvailabilityDto> LotSerials { get; set; }

    }

    /// <summary>
    /// Defines a warehouse location
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LocationDto
    {
        /// <summary>
        /// The id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

    }

    /// <summary>
    /// Inventory summary for a specific lot/serial number
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LotSerialAvailabilityDto
    {
        /// <summary>
        /// Id/number of the LOT/Serial
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lotSerialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LotSerialNumber { get; set; }

        /// <summary>
        /// Expiration date of the LOT/Serial
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpirationDate { get; set; }

        /// <summary>
        /// Physical quantity on-hand of item LOT/Serial id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantityOnHand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double QuantityOnHand { get; set; }

        /// <summary>
        /// Quantity available of item LOT/Serial id according to set availability calculation rules
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantityAvailable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double QuantityAvailable { get; set; }

        /// <summary>
        /// Quantity of item LOT/Serial id available for shipping
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantityAvailableForShipment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double QuantityAvailableForShipment { get; set; }

        /// <summary>
        /// Quantity of item LOT/Serial id not included in the availability calculation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantityNotAvailable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double QuantityNotAvailable { get; set; }

    }

    /// <summary>
    /// Defines a new address when creating a sales order.
    /// <br/>When the address information is provided, it is expected to provide all needed fields for the address(line1, line2, countryId etc).
    /// <br/>No default values from the customer will be set for the non defined address fields.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewSalesOrderAddressDto
    {
        /// <summary>
        /// Address line 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("line1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Line1 { get; set; }

        /// <summary>
        /// Address line 2
        /// </summary>
        [Newtonsoft.Json.JsonProperty("line2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Line2 { get; set; }

        /// <summary>
        /// Address line 3
        /// </summary>
        [Newtonsoft.Json.JsonProperty("line3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Line3 { get; set; }

        /// <summary>
        /// The postal code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PostalCode { get; set; }

        /// <summary>
        /// The city
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string City { get; set; }

        /// <summary>
        /// The country. Required when setting the address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string CountryId { get; set; }

        /// <summary>
        /// The state
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string StateId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewSalesOrderBillingDto
    {
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NewSalesOrderContactDto Contact { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NewSalesOrderAddressDto Address { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewSalesOrderCommand
    {
        /// <summary>
        /// Sets the type id of an active sales order type to create
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Type { get; set; }

        /// <summary>
        /// Sets the new id that should be assigned to the new sales order.
        /// <br/>This is required if the specified Visma.net.ERP.SalesOrders.Api.Application.Commands.NewSalesOrder.NewSalesOrderCommand.Type has manual numbering set up or Visma.net.ERP.SalesOrders.Api.Application.Commands.NewSalesOrder.NewSalesOrderCommand.OverrideNumberSeries from the request is true.
        /// <br/>If not, it should be null or empty.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string OrderId { get; set; }

        /// <summary>
        /// Override the CurrencyId for the order. Must be a valid currency Id. If not specified, the customer's currency is used if not null. If null, company base currency is used
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string CurrencyId { get; set; }

        /// <summary>
        /// Sets the order date of the order to create. If not supplied, the current date will be used
        /// <br/>Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date { get; set; }

        /// <summary>
        /// Sets the requested on date for the order to create. If not supplied, the current date will be used
        /// <br/>Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RequestOn { get; set; }

        /// <summary>
        /// Sets the cancel by date for the order to create. If not supplied, the order type's days to keep will be added to the current date to determine the value of this field
        /// <br/>Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cancelBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CancelBy { get; set; }

        /// <summary>
        /// Sets the description for the order to create
        /// <br/>
        /// <br/>Note that text fields should not contain any personally identifiable or otherwise sensitive data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Description { get; set; }

        /// <summary>
        /// Sets the initial status code for the order. Must be null, empty or one of "Open" or "Hold". If not supplied the value will be determined by the sales order type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public NewSalesOrderCustomerDto Customer { get; set; } = new NewSalesOrderCustomerDto();

        [Newtonsoft.Json.JsonProperty("print", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SalesOrderPrintDto Print { get; set; }

        [Newtonsoft.Json.JsonProperty("shipping", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NewSalesOrderShippingDto Shipping { get; set; }

        [Newtonsoft.Json.JsonProperty("billing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NewSalesOrderBillingDto Billing { get; set; }

        [Newtonsoft.Json.JsonProperty("financialInformation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NewSalesOrderFinancialInfoDto FinancialInformation { get; set; }

        /// <summary>
        /// Sets the owner (employee) for the order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerId { get; set; }

        /// <summary>
        /// The lines that are added to the order upon creation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NewSalesOrderLineDto> OrderLines { get; set; }

        /// <summary>
        /// Override the TaxZoneId for the order. If not specified, the customer's location's TaxZoneId will be used
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxZoneId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaxZoneId { get; set; }

        /// <summary>
        /// Any note to apply to the order header.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2048)]
        public string Note { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentSettings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NewSalesOrderPaymentSettings PaymentSettings { get; set; }

        /// <summary>
        /// When this option is set to `true`, the `costTotal` of the order will be calculated based on `replacementUnitCost`.
        /// <br/>If option is set to `false`, the `costTotal` will be calculated based on `unitCost`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("useReplacementCostForMarginAndProfit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseReplacementCostForMarginAndProfit { get; set; }

        [Newtonsoft.Json.JsonProperty("freight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NewSalesOrderFreightDto Freight { get; set; }

        /// <summary>
        /// The branch with which this order is associated. Prio for setting the Branch ID being:
        /// <br/>&lt;list type="number"&gt;&lt;item&gt;BranchID set in body&lt;/item&gt;&lt;item&gt;BranchID from call header&lt;/item&gt;&lt;item&gt;BranchID from customer location&lt;/item&gt;&lt;item&gt;Company's default branch ID&lt;/item&gt;&lt;/list&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("branchId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string BranchId { get; set; }

        /// <summary>
        /// Sets the type code for the original sales order.
        /// <br/>If order is deleted and the field contains a order type/order number used as quote and is in status Complete, the original quote order will be reset to Open status
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalOrderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string OriginalOrderType { get; set; }

        /// <summary>
        /// Sets the unique identifier of the original order
        /// <br/>If order is deleted and the field contains a order type/order number used as quote and is in status Complete, the original quote order will be reset to Open status
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string OriginalOrderId { get; set; }

        /// <summary>
        /// Sets default sales person for the order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salesPersonId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string SalesPersonId { get; set; }

        /// <summary>
        /// The project with which this sales order is associated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ProjectId { get; set; }

        /// <summary>
        /// Sets whether the order is ROT/RUT deductible
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isRotRutDeductible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsRotRutDeductible { get; set; }

        [Newtonsoft.Json.JsonProperty("rotRutDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NewSalesOrderRotRutDetailsDto RotRutDetails { get; set; }

        /// <summary>
        /// Used to override the orderId that would else be set automatically by the system. When set true, also orderId should be provided
        /// </summary>
        [Newtonsoft.Json.JsonProperty("overrideNumberSeries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool OverrideNumberSeries { get; set; }

        [Newtonsoft.Json.JsonProperty("customFields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NewSalesOrderCustomFieldsDto CustomFields { get; set; }

    }

    /// <summary>
    /// Defines a new contact when creating a new sales order.
    /// <br/>When the contact information is provided, it is expected to provide all needed fields for the contact(name, attention etc).
    /// <br/>No default values from the customer will be set for the non defined contact fields.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewSalesOrderContactDto
    {
        /// <summary>
        /// Sets the full name of the contact
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Name { get; set; }

        /// <summary>
        /// Sets any attention for the contact
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attention", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Attention { get; set; }

        /// <summary>
        /// Sets the primary phone number of the contact
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Phone1 { get; set; }

        /// <summary>
        /// Sets the e-mail address of the contact, multiple e-mails can be separated by semicolon
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("emails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Emails { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewSalesOrderCustomFieldsDto
    {
        /// <summary>
        /// A free custom colum of type string with max length 100.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customStr1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomStr1 { get; set; }

        /// <summary>
        /// A free custom colum of type string with max length 100.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customStr2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomStr2 { get; set; }

        /// <summary>
        /// A free custom colum of type string with max length 100.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customStr3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomStr3 { get; set; }

        /// <summary>
        /// A free custom colum of type string with max length 100.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customStr4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomStr4 { get; set; }

        /// <summary>
        /// A free custom colum of type string with max length 100.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customStr5", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomStr5 { get; set; }

        /// <summary>
        /// A free custom colum of type decimal with max 4 decimals.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customDec1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CustomDec1 { get; set; }

        /// <summary>
        /// A free custom colum of type decimal with max 4 decimals.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customDec2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CustomDec2 { get; set; }

        /// <summary>
        /// A free custom colum of type int
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customInt1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CustomInt1 { get; set; }

        /// <summary>
        /// A free custom colum of type int
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customInt2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CustomInt2 { get; set; }

        /// <summary>
        /// A free custom colum of type DateTime - in UTC timezone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customDateTimeUtc1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CustomDateTimeUtc1 { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewSalesOrderCustomerDto
    {
        /// <summary>
        /// The unique id of the the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The contact id for the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contactId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ContactId { get; set; }

        /// <summary>
        /// The customer order text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Order { get; set; }

        /// <summary>
        /// The customer ref number text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("refNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string RefNo { get; set; }

        /// <summary>
        /// Sets the location for the customer supplied to use on the order.
        /// <br/>Must be a valid active location for the customer supplied in Visma.net.ERP.SalesOrders.Api.Dto.NewSalesOrder.NewSalesOrderCustomerDto.Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocationId { get; set; }

        /// <summary>
        /// Sets the terms to use for the sales order.
        /// <br/>Must be a valid terms identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("termsId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TermsId { get; set; }

        /// <summary>
        /// The unique global location number of the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gln", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gln { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewSalesOrderFinancialInfoDto
    {
        /// <summary>
        /// Sets if the order should be invoiced/billed separately
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceSeparately", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? InvoiceSeparately { get; set; }

        /// <summary>
        /// Sets the invoice date of the invoice that will be generated for the order.
        /// <br/>Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? InvoiceDate { get; set; }

        /// <summary>
        /// The reference number of the invoice generated for this order.
        /// <br/>This can be used if the numbering sequence assigned to invoices is configured for manual numbering.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string InvoiceId { get; set; }

        /// <summary>
        /// The post period for the invoice. This can be used to override the financial period. Must be a valid existing financial period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string PostPeriod { get; set; }

        /// <summary>
        /// The due date for the invoice created for the order. Default due date is set according to the credit terms.
        /// <br/>Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DueDate { get; set; }

        /// <summary>
        /// The date when the cash discount is available for the invoice created for the order. Default date is set based on the terms selected in the order.
        /// <br/>Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cashDiscountDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CashDiscountDate { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewSalesOrderFreightDto
    {
        /// <summary>
        /// The freight cost calculated for the sales order, can be manually set if orders Ship via code allows it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Cost { get; set; }

        /// <summary>
        /// The additional freight charges for handling the order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("premiumAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PremiumAmount { get; set; }

        /// <summary>
        /// The tax category that applies to the freight amount.
        /// <br/>By default, it is the tax category associated with the ship via code selected for the order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxCategoryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string TaxCategoryId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewSalesOrderLineDto
    {
        /// <summary>
        /// The Inventory Id of the item to add
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inventoryId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string InventoryId { get; set; }

        /// <summary>
        /// Sets the description of the order line item. This will override the default description from the inventory item
        /// <br/>
        /// <br/>Note that text fields should not contain any personally identifiable or otherwise sensitive data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Description { get; set; }

        /// <summary>
        /// Sets the Unit of measure for the line item. This will override the default UOM for the inventory item
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unitOfMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string UnitOfMeasure { get; set; }

        /// <summary>
        /// The way the line item should be shipped. This will override the default or the one set on the order head.
        /// <br/>
        /// <br/>One of the following options can be set:
        /// <br/>&lt;list type="bullet"&gt;&lt;item&gt;&lt;term&gt;CancelRemainder: &lt;/term&gt;&lt;description&gt;The ordered quantity should be delivered in one shipment&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;BackOrderAllowed: &lt;/term&gt;&lt;description&gt;The ordered quantity can be delivered in multiple shipments.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;ShipComplete: &lt;/term&gt;&lt;description&gt;The ordered quantity should be delivered in one shipment.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shippingRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShippingRule { get; set; }

        /// <summary>
        /// Sets the quantity of items on the order line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Quantity { get; set; }

        /// <summary>
        /// Sets the unit cost of the product on the line. If no cost is set (null or omitted) the cost will be set
        /// <br/>according to predefined rules
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unitCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnitCost { get; set; }

        /// <summary>
        /// Sets the unit price for the product on the line.
        /// <br/>If no price is set(null or omitted) the price will be set according to predefined rules based on the inventoryId and the customer.
        /// <br/>Note that the behavior of the `unitPrice` field is affected by the `hasManualPrice` option.
        /// <br/>If `hasManualPrice` is provided and set to "false", and `unitPrice` is provided, the system will set the `unitPrice` according to the predefined rules.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnitPrice { get; set; }

        /// <summary>
        /// Sets the external link for the line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string ExternalLink { get; set; }

        /// <summary>
        /// Sets the warehouse the item should be shipped from. This will override the default, or the one set on the order head.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("warehouseId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WarehouseId { get; set; }

        /// <summary>
        /// Sets the reason code for the line. This must be one of the selectable reason codes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reasonCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReasonCode { get; set; }

        /// <summary>
        /// Overrides the default tax category id (from customer's class). The value must be one of the selectable Tax Categories
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxCategoryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaxCategoryId { get; set; }

        /// <summary>
        /// Sets the undership threshold in percent. If not set, information from the inventory item is used
        /// </summary>
        [Newtonsoft.Json.JsonProperty("undershipThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double? UndershipThreshold { get; set; }

        /// <summary>
        /// Sets the overship threshold in percent. If not set, information from the inventory item is used
        /// </summary>
        [Newtonsoft.Json.JsonProperty("overshipThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(100D, 999D)]
        public double? OvershipThreshold { get; set; }

        /// <summary>
        /// Sets the day the order line should be shipped, so that the customer gets it on the requested date (Ship On).
        /// <br/>Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ShipDate { get; set; }

        /// <summary>
        /// Sets the date the order line is requested (Requested On)
        /// <br/>Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RequestDate { get; set; }

        /// <summary>
        /// Overrides the Sales Account Id of the line. The value must be one of the selectable Accounts.
        /// <br/>If not set, a value based on the rules is used
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salesAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string SalesAccountId { get; set; }

        /// <summary>
        /// Overrides the Subaccount setup for the line.
        /// <br/>Each entry corresponds to a subaccount id/value pair
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subaccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Subaccount { get; set; }

        /// <summary>
        /// Adds a text note to the sales order line.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2048)]
        public string Note { get; set; }

        /// <summary>
        /// Sets the discount for the line if applicable. This must be one of the selectable discount codes.
        /// <br/>&lt;remarks&gt;
        /// <br/>Note that the behavior of the 'discountCode' field is affected by the 'hasManualDiscount' option.
        /// <br/>If 'hasManualDiscount' is provided and set to "false", and 'discountCode' is provided, the system will set the discountCode according to the predefined rules.
        /// <br/>&lt;/remarks&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discountCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string DiscountCode { get; set; }

        /// <summary>
        /// Sets the manual percentage discount for the line.
        /// <br/>&lt;remarks&gt;
        /// <br/>Note that the behavior of the 'discountPercent' field is affected by the 'hasManualDiscount' option.
        /// <br/>If 'hasManualDiscount' is provided and set to "false", and 'discountPercent' is provided, the system will set the discountPercent according to the predefined rules.
        /// <br/>&lt;/remarks&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discountPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-100D, 100D)]
        public double? DiscountPercent { get; set; }

        /// <summary>
        /// Sets the manual currency discount amount for the line.
        /// <br/>&lt;remarks&gt;
        /// <br/>Note that the behavior of the 'discountAmount' field is affected by the 'hasManualDiscount' option.
        /// <br/>If 'hasManualDiscount' is provided and set to "false", and 'discountAmount' is provided, the system will set the discountAmount according to the predefined rules.
        /// <br/>&lt;/remarks&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discountAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DiscountAmount { get; set; }

        /// <summary>
        /// Indicates that line level discount is applied manually.
        /// <br/>&lt;remarks&gt;
        /// <br/>Note that the behavior of the fields 'discountCode', 'discountPercent' and 'discountAmount' is affected by this option.
        /// <br/>If 'hasManualDiscount' is provided and set to "false", and discount field(s) is provided, the system will set the line level discounts according to the predefined rules.
        /// <br/>&lt;/remarks&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasManualDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasManualDiscount { get; set; }

        /// <summary>
        /// Sets the warehouse location that will be used for the shipment generated for the order the warehouse location Id for this line. This must be a valid location for `warehouseId` and will override the default if set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("warehouseLocationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WarehouseLocationId { get; set; }

        /// <summary>
        /// The type of operation the line represents to the order. Acceptable values are 'Issue' or 'Receipt'. This must be a valid operation for sales order type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Operation { get; set; }

        /// <summary>
        /// Indicates that the `unitPrice` in this line has been specified manually.
        /// <br/>If set to "false", the system updates the unit price in the line according to predefined rules.
        /// <br/>Note that the behavior of the field `unitPrice` is affected by this option.
        /// <br/>If `hasManualPrice` is provided and set to "false", and `unitPrice` is provided, the system will set the `unitPrice` according to the predefined rules.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasManualPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasManualPrice { get; set; }

        /// <summary>
        /// The branch with which this line is associated.
        /// <br/>If no `BranchId` is provided, default is set from order `BranchId`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("branchId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string BranchId { get; set; }

        /// <summary>
        /// Indicates if line is comissionable.
        /// <br/>If not set, the default value is picked from the inventory item
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commissionable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Commissionable { get; set; }

        /// <summary>
        /// Sets the sales person for the line.
        /// <br/>If `SalesPersonId` is provided as (null), the value will be set from from order `SalesPersonId`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salesPersonId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string SalesPersonId { get; set; }

        /// <summary>
        /// Sets the purchase source of the line.
        /// <br/>Accepted values are `dropShip` or `purchaseToOrder`, when no value provided, the default value is picked from the inventory item.
        /// <br/>If the value was provided as '' (empty string), the value will set to null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purchaseOrderSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurchaseOrderSource { get; set; }

        /// <summary>
        /// &lt;remarks&gt;
        /// <br/>            If the actual value was provided as (null), the value will be set from the inventory item preferred supplier.
        /// <br/>            &lt;/remarks&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supplierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupplierId { get; set; }

        /// <summary>
        /// Sets the supplier price for the line item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supplierPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SupplierPrice { get; set; }

        /// <summary>
        /// The project task with which this sales order line is associated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectTaskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ProjectTaskId { get; set; }

        /// <summary>
        /// Indicates if line is RotRut deductible.
        /// <br/>If not set, the default value is picked from the inventory item
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isRotRutDeductible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsRotRutDeductible { get; set; }

        /// <summary>
        /// Sort order for line. Lines with provided sort order will be prioritized over lines without sort order.
        /// <br/>Lines without sort order will be placed after lines with sort order.
        /// <br/>Sort order will be automatically changed to consecutive numbers starting from 1.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortOrder { get; set; }

        /// <summary>
        /// The line number of the original invoice to be returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceLineNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InvoiceLineNumber { get; set; }

        /// <summary>
        /// The reference number of the original invoice to be returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string InvoiceNumber { get; set; }

        /// <summary>
        /// The invoice type of the original invoice to be returned
        /// <br/>
        /// <br/>One of the following options can be set:
        /// <br/>&lt;list type="bullet"&gt;&lt;item&gt;&lt;term&gt;Invoice&lt;/term&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;CreditNote&lt;/term&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;CashSales&lt;/term&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;CashReturn&lt;/term&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;DebitNote&lt;/term&gt;&lt;/item&gt;&lt;/list&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceType { get; set; }

        [Newtonsoft.Json.JsonProperty("customFields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NewSalesOrderCustomFieldsDto CustomFields { get; set; }

        /// <summary>
        /// Sets the alternate id for the inventory item on the line.
        /// <br/>If the actual value was provided as (null), the value will be set from the inventory item alternate id predicates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inventoryAlternateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InventoryAlternateId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewSalesOrderPaymentSettings
    {
        /// <summary>
        /// Overrides the default payment method set on the customer. This must be a valid and active payment method id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentMethodId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentMethodId { get; set; }

        /// <summary>
        /// The cash account associated with the set payment method.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cashAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string CashAccountId { get; set; }

        /// <summary>
        /// Sets the external reference number for the order. This must be set if order type requires it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string PaymentReference { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewSalesOrderRotRutDetailsDto
    {
        [Newtonsoft.Json.JsonProperty("distributedAutomatically", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DistributedAutomatically { get; set; }

        /// <summary>
        /// Sets the Rot/Rut type of the order, must be "Rut" or "Rut", if not provided a default value will be set
        /// <br/>from the default Branch settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// Sets the apartment for ROT order, has to be provided together with organisation number. When provided, the estate must be empty
        /// </summary>
        [Newtonsoft.Json.JsonProperty("apartment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Apartment { get; set; }

        /// <summary>
        /// Sets the estate for ROT order. When provided, the apartment and organisation number must be empty
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Estate { get; set; }

        /// <summary>
        /// Sets the organisation number for ROT order, has to be provided together with apartment. When provided, the estate must be empty
        /// </summary>
        [Newtonsoft.Json.JsonProperty("organisationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string OrganisationNumber { get; set; }

        /// <summary>
        /// The person(s) who will receive the tax deduction
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distribution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RotRutDistributionDto> Distribution { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewSalesOrderShippingDto
    {
        /// <summary>
        /// Sets the date the shipment is scheduled for
        /// <br/>Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduledDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ScheduledDate { get; set; }

        /// <summary>
        /// Sets whether the order should be shipped separately or included in a batch segment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipSeparately", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ShipSeparately { get; set; }

        /// <summary>
        /// Sets the shipping rule for the order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rule { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NewSalesOrderAddressDto Address { get; set; }

        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NewSalesOrderContactDto Contact { get; set; }

        /// <summary>
        /// Sets the default site for the customer supplied to use on the order. Must be a valid site id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferredWarehouseId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string PreferredWarehouseId { get; set; }

        /// <summary>
        /// Sets the intrastat transaction type id for the sales order, if not supplied the default value from the ordertype will be used. Must be a valid intrastat transaction type id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("intrastatTransactionTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IntrastatTransactionTypeId { get; set; }

        /// <summary>
        /// Sets the unique id that represents the carrier and its service to be used for shipping the ordered goods.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipViaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string ShipViaId { get; set; }

        /// <summary>
        /// Sets whether this is residential delivery
        /// </summary>
        [Newtonsoft.Json.JsonProperty("residentialDelivery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ResidentialDelivery { get; set; }

        /// <summary>
        /// Sets whether this is a saturday delivery
        /// </summary>
        [Newtonsoft.Json.JsonProperty("saturdayDelivery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SaturdayDelivery { get; set; }

        /// <summary>
        /// Sets whether insurance applies to this shipping
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insurance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Insurance { get; set; }

        /// <summary>
        /// Sets priority of the order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Priority { get; set; }

        /// <summary>
        /// Sets the shipping zone of the order freight
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zoneId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string ZoneId { get; set; }

        /// <summary>
        /// The identifier of the point (such as a city or town) where the title of goods passes from the company to the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fobPointId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string FobPointId { get; set; }

        /// <summary>
        /// The identifier of the shipping terms used for the order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("termsId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string TermsId { get; set; }

    }

    /// <summary>
    /// Defines an address when updating a sales order.
    /// <br/>Only the provided fields will be changed in address.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchSalesOrderAddressDto
    {
        /// <summary>
        /// Address line 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("line1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Line1 { get; set; }

        /// <summary>
        /// Address line 2
        /// </summary>
        [Newtonsoft.Json.JsonProperty("line2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Line2 { get; set; }

        /// <summary>
        /// Address line 3
        /// </summary>
        [Newtonsoft.Json.JsonProperty("line3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Line3 { get; set; }

        /// <summary>
        /// The postal code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PostalCode { get; set; }

        /// <summary>
        /// The city
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string City { get; set; }

        /// <summary>
        /// The state
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string StateId { get; set; }

        /// <summary>
        /// The country.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string CountryId { get; set; }

        /// <summary>
        /// Whether this address overrides the default address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("overridesDefault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverridesDefault { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchSalesOrderBillingDto
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PatchSalesOrderAddressDto Address { get; set; }

        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PatchSalesOrderContactDto Contact { get; set; }

    }

    /// <summary>
    /// The Visma.net.ERP.SalesOrders.Api.Application.Commands.PatchSalesOrder.PatchSalesOrderCommand is a command for updating parts of a sales order
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchSalesOrderCommand
    {
        /// <summary>
        /// Sets the order date of the order.
        /// <br/>Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date { get; set; }

        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PatchSalesOrderCustomerDto Customer { get; set; }

        /// <summary>
        /// Override the CurrencyId for the order. Must be a valid currency Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string CurrencyId { get; set; }

        /// <summary>
        /// Description for the order
        /// <br/>
        /// <br/>Note that text fields should not contain any personally identifiable or otherwise sensitive data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Description { get; set; }

        /// <summary>
        /// Sets the status for the order. Must be "Open", "Hold", "BackOrder", "Cancelled", "Completed". When status is set, no other fields may be patched in the same call
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        [Newtonsoft.Json.JsonProperty("print", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SalesOrderPrintDto Print { get; set; }

        /// <summary>
        /// Cancel by date for the order.
        /// <br/>Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cancelBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CancelBy { get; set; }

        [Newtonsoft.Json.JsonProperty("shipping", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PatchSalesOrderShippingDto Shipping { get; set; }

        [Newtonsoft.Json.JsonProperty("billing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PatchSalesOrderBillingDto Billing { get; set; }

        /// <summary>
        /// Sets the owner (employee) for the order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerId { get; set; }

        /// <summary>
        /// Sets default sales person for the order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salesPersonId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string SalesPersonId { get; set; }

        /// <summary>
        /// Sets the requested on date for the order.
        /// <br/>Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RequestOn { get; set; }

        [Newtonsoft.Json.JsonProperty("financialInformation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PatchSalesOrderFinancialInfoDto FinancialInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentSettings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PatchSalesOrderPaymentSettingsDto PaymentSettings { get; set; }

        /// <summary>
        /// Any note to apply to the order header.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2048)]
        public string Note { get; set; }

        /// <summary>
        /// Override the TaxZoneId for the order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxZoneId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaxZoneId { get; set; }

        /// <summary>
        /// When this option is set to `true`, the `costTotal` of the order will be calculated based on `replacementUnitCost`.
        /// <br/>If option is set to `false`, the `costTotal` will be calculated based on `unitCost`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("useReplacementCostForMarginAndProfit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseReplacementCostForMarginAndProfit { get; set; }

        [Newtonsoft.Json.JsonProperty("freight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PatchSalesOrderFreightDto Freight { get; set; }

        /// <summary>
        /// The branch with which this order is associated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("branchId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string BranchId { get; set; }

        /// <summary>
        /// Sets the type code for the original sales order
        /// <br/>If order is deleted and the field contains a order type/order number used as quote and is in status Complete, the original quote order will be reset to Open status
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalOrderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string OriginalOrderType { get; set; }

        /// <summary>
        /// Sets the unique identifier of the original order
        /// <br/>If order is deleted and the field contains a order type/order number used as quote and is in status Complete, the original quote order will be reset to Open status
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string OriginalOrderId { get; set; }

        /// <summary>
        /// The project with which this sales order is associated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ProjectId { get; set; }

        /// <summary>
        /// Sets whether the order is ROT/RUT deductible
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isRotRutDeductible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsRotRutDeductible { get; set; }

        [Newtonsoft.Json.JsonProperty("rotRutDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PatchSalesOrderRotRutDetailsDto RotRutDetails { get; set; }

        [Newtonsoft.Json.JsonProperty("customFields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PatchSalesOrderCustomFieldsDto CustomFields { get; set; }

    }

    /// <summary>
    /// Defines an contact when updating a sales order.
    /// <br/>Only the provided fields will be changed in contact.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchSalesOrderContactDto
    {
        /// <summary>
        /// Sets the full name of the contact
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Name { get; set; }

        /// <summary>
        /// Sets any attention for the contact
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attention", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Attention { get; set; }

        /// <summary>
        /// Sets the primary phone number of the contact
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Phone1 { get; set; }

        /// <summary>
        /// Sets the e-mail address of the contact, multiple e-mails can be separated by semicolon
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("emails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Emails { get; set; }

        /// <summary>
        /// Whether this contact overrides the default contact
        /// </summary>
        [Newtonsoft.Json.JsonProperty("overridesDefault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverridesDefault { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchSalesOrderCustomFieldsDto
    {
        /// <summary>
        /// A free custom colum of type string with max length 100.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customStr1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string CustomStr1 { get; set; }

        /// <summary>
        /// A free custom colum of type string with max length 100.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customStr2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string CustomStr2 { get; set; }

        /// <summary>
        /// A free custom colum of type string with max length 100.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customStr3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string CustomStr3 { get; set; }

        /// <summary>
        /// A free custom colum of type string with max length 100.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customStr4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string CustomStr4 { get; set; }

        /// <summary>
        /// A free custom colum of type string with max length 100.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customStr5", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string CustomStr5 { get; set; }

        /// <summary>
        /// A free custom colum of type decimal with max 4 decimals.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customDec1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CustomDec1 { get; set; }

        /// <summary>
        /// A free custom colum of type decimal with max 4 decimals.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customDec2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CustomDec2 { get; set; }

        /// <summary>
        /// A free custom colum of type int
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customInt1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CustomInt1 { get; set; }

        /// <summary>
        /// A free custom colum of type int
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customInt2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CustomInt2 { get; set; }

        /// <summary>
        /// A free custom colum of type DateTime - in UTC timezone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customDateTimeUtc1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CustomDateTimeUtc1 { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchSalesOrderCustomerDto
    {
        /// <summary>
        /// The unique id of the the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The customer ref number text. If null or not supplied the value will not be changed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("refNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string RefNo { get; set; }

        /// <summary>
        /// The customer order text.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Order { get; set; }

        /// <summary>
        /// The contact id for the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contactId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ContactId { get; set; }

        /// <summary>
        /// Sets the terms to use for the sales order.
        /// <br/>Must be a valid terms identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("termsId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TermsId { get; set; }

        /// <summary>
        /// Sets the location for the customer supplied to use on the order.
        /// <br/>Must be a valid active location for the customer/&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocationId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchSalesOrderFinancialInfoDto
    {
        /// <summary>
        /// Sets if the order should be invoiced/billed separately
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceSeparately", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? InvoiceSeparately { get; set; }

        /// <summary>
        /// Sets the invoice date of the invoice that will be generated for the order.
        /// <br/>Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? InvoiceDate { get; set; }

        /// <summary>
        /// The post period for the invoice. This can be used to override the financial period. Must be a valid existing financial period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string PostPeriod { get; set; }

        /// <summary>
        /// The due date for the invoice created for the order. Default due date is set according to the credit terms.
        /// <br/>Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DueDate { get; set; }

        /// <summary>
        /// The date when the cash discount is available for the invoice created for the order. Default date is set based on the terms selected in the order.
        /// <br/>Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cashDiscountDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CashDiscountDate { get; set; }

        /// <summary>
        /// The reference number of the invoice generated for this order.
        /// <br/>This can be used if the numbering sequence assigned to invoices is configured for manual numbering.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string InvoiceId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchSalesOrderFreightDto
    {
        /// <summary>
        /// The freight cost calculated for the sales order, can be manually set if orders Ship via code allows it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Cost { get; set; }

        /// <summary>
        /// The additional freight charges for handling the order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("premiumAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PremiumAmount { get; set; }

        /// <summary>
        /// The tax category that applies to the freight amount.
        /// <br/>By default, it is the tax category associated with the ship via code selected for the order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxCategoryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string TaxCategoryId { get; set; }

    }

    /// <summary>
    /// The sales order line which is set to patch
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchSalesOrderLineDto
    {
        /// <summary>
        /// The line id of the line.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lineId", Required = Newtonsoft.Json.Required.Always)]
        public int LineId { get; set; }

        /// <summary>
        /// Patch the reason code for the line. This must be one of the selectable reason codes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reasonCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReasonCode { get; set; }

        /// <summary>
        /// Sets the description of the order line item. This will override the default description from the inventory item
        /// <br/>
        /// <br/>Note that text fields should not contain any personally identifiable or otherwise sensitive data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Description { get; set; }

        /// <summary>
        /// The way the line item should be shipped.
        /// <br/>
        /// <br/>One of the following options can be set:
        /// <br/>&lt;list type="bullet"&gt;&lt;item&gt;&lt;term&gt;CancelRemainder: &lt;/term&gt;&lt;description&gt;The ordered quantity should be delivered in one shipment&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;BackOrderAllowed: &lt;/term&gt;&lt;description&gt;The ordered quantity can be delivered in multiple shipments.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;ShipComplete: &lt;/term&gt;&lt;description&gt;The ordered quantity should be delivered in one shipment.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shippingRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShippingRule { get; set; }

        /// <summary>
        /// Sets the unit cost of the product on the line.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unitCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnitCost { get; set; }

        /// <summary>
        /// Sets the undership threshold in percent. If not set, information from the inventory item is used
        /// </summary>
        [Newtonsoft.Json.JsonProperty("undershipThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double? UndershipThreshold { get; set; }

        /// <summary>
        /// Sets the overship threshold in percent. If not set, information from the inventory item is used
        /// </summary>
        [Newtonsoft.Json.JsonProperty("overshipThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(100D, 999D)]
        public double? OvershipThreshold { get; set; }

        /// <summary>
        /// Sets the external link for the line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string ExternalLink { get; set; }

        /// <summary>
        /// Any note to apply to the order header.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2048)]
        public string Note { get; set; }

        /// <summary>
        /// Overrides the Sales Account Id of the line. The value must be one of the selectable Accounts.
        /// <br/>If not set, a value based on the rules is used
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salesAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string SalesAccountId { get; set; }

        /// <summary>
        /// The project task with which this sales order line is associated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectTaskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ProjectTaskId { get; set; }

        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortOrder { get; set; }

        /// <summary>
        /// Sets the day the order line should be shipped, so that the customer gets it on the requested date (Ship On).
        /// <br/>Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ShipDate { get; set; }

        /// <summary>
        /// Sets the date the order line is requested (Requested On)
        /// <br/>Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RequestDate { get; set; }

        /// <summary>
        /// Sets the warehouse location that will be used for the shipment generated for the order the warehouse location Id for this line.
        /// <br/>This must be a valid location for `warehouseId` and will override the default if set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("warehouseLocationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WarehouseLocationId { get; set; }

        /// <summary>
        /// Sets the warehouse the item should be shipped from. This will override the default, or the one set on the order head.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("warehouseId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WarehouseId { get; set; }

        /// <summary>
        /// Overrides the Subaccount setup for the line.
        /// <br/>Each entry corresponds to a subaccount id/value pair
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subaccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Subaccount { get; set; }

        /// <summary>
        /// Indicates that line level discount is applied manually.
        /// <br/>&lt;remarks&gt;
        /// <br/>Note that the behavior of the fields 'discountCode', 'discountPercent' and 'discountAmount' is affected by this option.
        /// <br/>If 'hasManualDiscount' is provided and set to "false", and discount field(s) is provided, the system will set the line level discounts according to the predefined rules.
        /// <br/>&lt;/remarks&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasManualDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasManualDiscount { get; set; }

        /// <summary>
        /// Sets the manual percentage discount for the line.
        /// <br/>&lt;remarks&gt;
        /// <br/>Note that the behavior of the 'discountPercent' field is affected by the 'hasManualDiscount' option.
        /// <br/>If 'hasManualDiscount' is provided and set to "false", and 'discountPercent' is provided, the system will set the discountPercent according to the predefined rules.
        /// <br/>&lt;/remarks&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discountPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-100D, 100D)]
        public double? DiscountPercent { get; set; }

        /// <summary>
        /// Sets the manual currency discount amount for the line.
        /// <br/>&lt;remarks&gt;
        /// <br/>Note that the behavior of the 'discountAmount' field is affected by the 'hasManualDiscount' option.
        /// <br/>If 'hasManualDiscount' is provided and set to "false", and 'discountAmount' is provided, the system will set the discountAmount according to the predefined rules.
        /// <br/>&lt;/remarks&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discountAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DiscountAmount { get; set; }

        /// <summary>
        /// Overrides the default tax category id. The value must be one of the selectable Tax Categories
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxCategoryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaxCategoryId { get; set; }

        /// <summary>
        /// Sets the discount for the line if applicable. This must be one of the selectable discount codes.
        /// <br/>&lt;remarks&gt;
        /// <br/>Note that the behavior of the 'discountCode' field is affected by the 'hasManualDiscount' option.
        /// <br/>If 'hasManualDiscount' is provided and set to "false", and 'discountCode' is provided, the system will set the discountCode according to the predefined rules.
        /// <br/>&lt;/remarks&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discountCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string DiscountCode { get; set; }

        /// <summary>
        /// Sets the quantity of items on the order line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Quantity { get; set; }

        /// <summary>
        /// Sets the Unit of measure for the line item. This will override the default UOM for the inventory item
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unitOfMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string UnitOfMeasure { get; set; }

        /// <summary>
        /// Sets the unit price for the product on the line.
        /// <br/>If no price is set(null or omitted) the price will be set according to predefined rules based on the inventoryId and the customer.
        /// <br/>Note that the behavior of the `unitPrice` field is affected by the `hasManualPrice` option.
        /// <br/>If `hasManualPrice` is provided and set to "false", and `unitPrice` is provided, the system will set the `unitPrice` according to the predefined rules.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnitPrice { get; set; }

        /// <summary>
        /// The type of operation the line represents to the order. Acceptable values are 'Issue' or 'Receipt'. This must be a valid operation for sales order type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Operation { get; set; }

        /// <summary>
        /// Indicates that the `unitPrice` in this line has been specified manually.
        /// <br/>If set to "false", the system updates the unit price in the line according to predefined rules.
        /// <br/>Note that the behavior of the field `unitPrice` is affected by this option.
        /// <br/>If `hasManualPrice` is provided and set to "false", and `unitPrice` is provided, the system will set the `unitPrice` according to the predefined rules.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasManualPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasManualPrice { get; set; }

        /// <summary>
        /// Sets the branch with which this line is associated.
        /// <br/>If `BranchId` is provided as (null), the value will be set from from order `BranchId`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("branchId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BranchId { get; set; }

        /// <summary>
        /// Indicates if line is comissionable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commissionable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Commissionable { get; set; }

        /// <summary>
        /// Sets the sales person for the line.
        /// <br/>If `SalesPersonId` is provided as (null), the value will be set from from order `SalesPersonId`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salesPersonId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string SalesPersonId { get; set; }

        /// <summary>
        /// Sets the purchase source of the line.
        /// <br/>Accepted values are `dropShip` or `purchaseToOrder`, when null provided, value will be set from default value from the inventory item.
        /// <br/>If the value was provided as '' (empty string), the value will set to null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purchaseOrderSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurchaseOrderSource { get; set; }

        /// <summary>
        /// Sets the Purchase Order Vendor for the line.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supplierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupplierId { get; set; }

        /// <summary>
        /// Sets the supplier price for the line item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supplierPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SupplierPrice { get; set; }

        /// <summary>
        /// Indicates if the line is completed or not.
        /// <br/>If provided, this is the only operation that can be performed on the line.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("completed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Completed { get; set; }

        /// <summary>
        /// Indicates if line is RotRut deductible.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isRotRutDeductible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsRotRutDeductible { get; set; }

        /// <summary>
        /// The line number of the original invoice to be returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceLineNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InvoiceLineNumber { get; set; }

        /// <summary>
        /// The reference number of the original invoice to be returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string InvoiceNumber { get; set; }

        /// <summary>
        /// The invoice type of the original invoice to be returned
        /// <br/>
        /// <br/>One of the following options can be set:
        /// <br/>&lt;list type="bullet"&gt;&lt;item&gt;&lt;term&gt;Invoice&lt;/term&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;CreditNote&lt;/term&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;CashSales&lt;/term&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;CashReturn&lt;/term&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;DebitNote&lt;/term&gt;&lt;/item&gt;&lt;/list&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceType { get; set; }

        [Newtonsoft.Json.JsonProperty("customFields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PatchSalesOrderCustomFieldsDto CustomFields { get; set; }

        /// <summary>
        /// Sets the alternate id for the inventory item on the line.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inventoryAlternateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InventoryAlternateId { get; set; }

    }

    /// <summary>
    /// The Visma.net.ERP.SalesOrders.Api.Application.Commands.PatchSalesOrderLines.PatchSalesOrderLinesCommand is a command for updating the lines of a sales order
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchSalesOrderLinesCommand
    {
        /// <summary>
        /// The sales order lines that are set to patch
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PatchSalesOrderLineDto> Lines { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchSalesOrderPaymentSettingsDto
    {
        /// <summary>
        /// Overrides the default payment method set on the customer. This must be a valid and active payment method id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentMethodId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentMethodId { get; set; }

        /// <summary>
        /// The cash account associated with the set payment method.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cashAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string CashAccountId { get; set; }

        /// <summary>
        /// Sets the external reference number for the order. This must be set if order type requires it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string PaymentReference { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchSalesOrderRotRutDetailsDto
    {
        [Newtonsoft.Json.JsonProperty("distributedAutomatically", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DistributedAutomatically { get; set; }

        /// <summary>
        /// Sets the apartment for ROT order, has to be provided together with organisation number. When provided, the estate must be empty
        /// </summary>
        [Newtonsoft.Json.JsonProperty("apartment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Apartment { get; set; }

        /// <summary>
        /// Sets the estate for ROT order. When provided, the apartment and organisation number must be empty
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Estate { get; set; }

        /// <summary>
        /// Sets the organisation number for ROT order, has to be provided together with apartment. When provided, the estate must be empty
        /// </summary>
        [Newtonsoft.Json.JsonProperty("organisationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string OrganisationNumber { get; set; }

        /// <summary>
        /// Sets the Rot/Rut type of the order, must be "Rut" or "Rut", if null will be provided a default value will be set
        /// <br/>from the default Branch settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// The person(s) who will receive the tax deduction.
        /// <br/>When provided, it will replace the existing distribution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distribution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RotRutDistributionDto> Distribution { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchSalesOrderShippingDto
    {
        /// <summary>
        /// Sets whether the order should be shipped separately or included in a batch segment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipSeparately", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ShipSeparately { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PatchSalesOrderAddressDto Address { get; set; }

        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PatchSalesOrderContactDto Contact { get; set; }

        /// <summary>
        /// Sets the default site for the customer supplied to use on the order. Must be a valid site id
        /// <br/>If empty string, the default site for order will be removed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferredWarehouseId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string PreferredWarehouseId { get; set; }

        /// <summary>
        /// Sets the shipping rule for the order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rule { get; set; }

        /// <summary>
        /// Sets the date the shipment is scheduled for
        /// <br/>Unless a specific time zone offset is specified with the date (e.g. '2012-12-24T13:30:23+02:00'), the passed date is considered to be in the UTC time zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduledDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ScheduledDate { get; set; }

        /// <summary>
        /// Sets the intrastat transaction type id for the sales order. Must be a valid intrastat transaction type id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("intrastatTransactionTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IntrastatTransactionTypeId { get; set; }

        /// <summary>
        /// Sets the unique id that represents the carrier and its service to be used for shipping the ordered goods. Must be a valid carrier id.
        /// <br/>If empty string then the value will be set to null
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipViaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string ShipViaId { get; set; }

        /// <summary>
        /// Sets whether this is residential delivery
        /// </summary>
        [Newtonsoft.Json.JsonProperty("residentialDelivery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ResidentialDelivery { get; set; }

        /// <summary>
        /// Sets whether this is a saturday delivery
        /// </summary>
        [Newtonsoft.Json.JsonProperty("saturdayDelivery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SaturdayDelivery { get; set; }

        /// <summary>
        /// Sets whether insurance applies to this shipping
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insurance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Insurance { get; set; }

        /// <summary>
        /// Sets priority of the order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Priority { get; set; }

        /// <summary>
        /// Sets the shipping zone of the order freight
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zoneId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZoneId { get; set; }

        /// <summary>
        /// The identifier of the point (such as a city or town) where the title of goods passes from the company to the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fobPointId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string FobPointId { get; set; }

        /// <summary>
        /// The identifier of the shipping terms used for the order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("termsId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string TermsId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentDto
    {
        /// <summary>
        /// The type of payment document that is applied to the sales order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentType { get; set; }

        /// <summary>
        /// The reference number of the payment document
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// The amount of the payment applied to the order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amountAppliedToOrder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double AmountAppliedToOrder { get; set; }

        /// <summary>
        /// The amount of the payment that is applied to the order and transferred to related invoice(s)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("billedAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double BilledAmount { get; set; }

        /// <summary>
        /// The total amount of the payment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalAmount { get; set; }

        /// <summary>
        /// The balance of the payment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("balance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Balance { get; set; }

        /// <summary>
        /// The status of the payment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>
        /// The external reference number of the payment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }

        /// <summary>
        /// The payment method of the payment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// The cash account of the payment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cashAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CashAccount { get; set; }

        /// <summary>
        /// The currency for the payment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProblemDetails
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }

        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instance { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The Visma.net.ERP.SalesOrders.Api.Dto.ProjectDto class defines a project reference for a sales order
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectDto
    {
        /// <summary>
        /// The id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// An internal unique identifier of the project
        /// </summary>
        [Newtonsoft.Json.JsonProperty("internalId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InternalId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RotRutDistributionDto
    {
        /// <summary>
        /// The personal ID of the person receiving the tax deduction
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PersonalId { get; set; }

        /// <summary>
        /// Selection to indicate that this is an extra amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extra", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Extra { get; set; }

        /// <summary>
        /// The total amount that is tax deductible
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesOrderBillingDto
    {
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactDto Contact { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressDto Address { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesOrderCommissionDto
    {
        /// <summary>
        /// The id of the sales person that gets the commision
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salesPersonId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalesPersonId { get; set; }

        /// <summary>
        /// The commission percent
        /// </summary>
        [Newtonsoft.Json.JsonProperty("percent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Percent { get; set; }

        /// <summary>
        /// The commission amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        /// <summary>
        /// The order's commissionable amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commissionableAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CommissionableAmount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesOrderCustomerDto
    {
        /// <summary>
        /// An internal unique id of the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("internalId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InternalId { get; set; }

        /// <summary>
        /// The unique id of the the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The customer name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("taxZone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CdDescriptionPairDto TaxZone { get; set; }

        /// <summary>
        /// The contact id for the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contactId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ContactId { get; set; }

        /// <summary>
        /// The customer order text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Order { get; set; }

        /// <summary>
        /// The customer ref number text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("refNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RefNo { get; set; }

        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerLocationDto Location { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesOrderDiscountDto
    {
        /// <summary>
        /// The number of discount line set for the order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("manualOrderIndex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ManualOrderIndex { get; set; }

        /// <summary>
        /// Indicates if the discount has been cancelled for the order and is not applicable
        /// </summary>
        [Newtonsoft.Json.JsonProperty("skipDiscount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SkipDiscount { get; set; }

        /// <summary>
        /// The identifier of the discount applied to the order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DiscountId { get; set; }

        /// <summary>
        /// The identifier of the discount sequence of the discount ID applied to the order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discountSequenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DiscountSequenceId { get; set; }

        /// <summary>
        /// The type of discount whose sequence was applied to the document(Group or Document)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// Indicates that the discount has been applied manually
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isManual", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsManual { get; set; }

        /// <summary>
        /// The amount used as a base for discount calculation if the discount is based on amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discountableAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DiscountableAmount { get; set; }

        /// <summary>
        /// The quantity used as a base for discount calculation if the discount is based on quantity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discountableQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DiscountableQuantity { get; set; }

        /// <summary>
        /// The amount of the discount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discountAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DiscountAmount { get; set; }

        /// <summary>
        /// The discount percent, if the discount is defined to be calculated as a percentage
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discountPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DiscountPercent { get; set; }

        [Newtonsoft.Json.JsonProperty("freeItem", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CdDescriptionPairDto FreeItem { get; set; }

        /// <summary>
        /// The quantity of the free item. Used to set the quantity for the order line generate by a free item discount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("freeItemQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FreeItemQuantity { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesOrderDto
    {
        /// <summary>
        /// The type code for the sales order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// The unique identifier of the order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderId { get; set; }

        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CdDescriptionPairDto Branch { get; set; }

        /// <summary>
        /// Description of the order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Date the order was submitted
        /// <br/>Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Date { get; set; }

        /// <summary>
        /// The cancel date for the order
        /// <br/>Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cancelBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CancelBy { get; set; }

        /// <summary>
        /// Date the order was last modified
        /// <br/>Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset LastModified { get; set; }

        /// <summary>
        /// Date the order was requested
        /// <br/>Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RequestOn { get; set; }

        /// <summary>
        /// Whether the order is ROT/RUT deductible
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isRotRutDeductible", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsRotRutDeductible { get; set; }

        /// <summary>
        /// The total quantity of inventory items in the order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderQty", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double OrderQty { get; set; }

        /// <summary>
        /// Any notes on the order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note { get; set; }

        /// <summary>
        /// CurrencyId for the order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyId { get; set; }

        /// <summary>
        /// When this option is set to `true`, the `costTotal` of the order will be calculated based on `replacementUnitCost`.
        /// <br/>If option is set to `false`, the `costTotal` will be calculated based on `unitCost`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("useReplacementCostForMarginAndProfit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseReplacementCostForMarginAndProfit { get; set; }

        /// <summary>
        /// The user name of the creator of the order. If the order was created by an API call this field will be null or empty.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedBy { get; set; }

        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectDto Project { get; set; }

        [Newtonsoft.Json.JsonProperty("print", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SalesOrderPrintDto Print { get; set; }

        [Newtonsoft.Json.JsonProperty("billing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SalesOrderBillingDto Billing { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentSettings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SalesOrderPaymentDto PaymentSettings { get; set; }

        [Newtonsoft.Json.JsonProperty("financialInformation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SalesOrderFinancialInfoDto FinancialInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmployeeDto Owner { get; set; }

        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SalesOrderOriginDto Origin { get; set; }

        [Newtonsoft.Json.JsonProperty("shipping", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SalesOrderShippingDto Shipping { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SalesOrderStatusDto Status { get; set; }

        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SalesOrderCustomerDto Customer { get; set; }

        [Newtonsoft.Json.JsonProperty("totals", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SalesOrderTotalsDto Totals { get; set; }

        [Newtonsoft.Json.JsonProperty("freight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SalesOrderFreightDto Freight { get; set; }

        /// <summary>
        /// The type code for the original sales order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalOrderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalOrderType { get; set; }

        /// <summary>
        /// The unique identifier of the original order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalOrderId { get; set; }

        [Newtonsoft.Json.JsonProperty("salesPerson", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SalesPersonDto SalesPerson { get; set; }

        /// <summary>
        /// An internal order version used for detecting concurrent updates to an order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Version { get; set; }

        /// <summary>
        /// The attachments of the order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AttachmentDto> Attachments { get; set; }

        /// <summary>
        /// Indicates if the document was emailed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Emailed { get; set; }

        [Newtonsoft.Json.JsonProperty("customFields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomFieldsDto CustomFields { get; set; }

    }

    /// <summary>
    /// The Visma.net.ERP.SalesOrders.Api.Dto.SalesOrderExpansions enumeration defines individual parts of the Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderDto that can be filled
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SalesOrderExpansions
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Billing")]
        Billing = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Payment")]
        Payment = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FinancialInformation")]
        FinancialInformation = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Shipping")]
        Shipping = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Customer")]
        Customer = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Owner")]
        Owner = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Origin")]
        Origin = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Note")]
        Note = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Freight")]
        Freight = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Attachments")]
        Attachments = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomFields")]
        CustomFields = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesOrderFinancialInfoDto
    {
        /// <summary>
        /// Whether the order should be invoiced separately
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceSeparately", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool InvoiceSeparately { get; set; }

        /// <summary>
        /// The id of the invoice issued for the order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceId { get; set; }

        /// <summary>
        /// The invoice date
        /// <br/>Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? InvoiceDate { get; set; }

        /// <summary>
        /// The due date for the invoice
        /// <br/>Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DueDate { get; set; }

        [Newtonsoft.Json.JsonProperty("terms", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CdDescriptionPairDto Terms { get; set; }

        /// <summary>
        /// The date for the cash discount
        /// <br/>Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cashDiscountDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CashDiscountDate { get; set; }

        /// <summary>
        /// The post period for the invoice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostPeriod { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesOrderFreightDto
    {
        [Newtonsoft.Json.JsonProperty("volume", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Volume { get; set; }

        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Weight { get; set; }

        /// <summary>
        /// The freight cost calculated for the sales order,
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cost", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Cost { get; set; }

        /// <summary>
        /// The freight cost calculated for the sales order in base currency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("costInBaseCurrency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double CostInBaseCurrency { get; set; }

        /// <summary>
        /// The additional freight charges for handling the order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("premiumAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double PremiumAmount { get; set; }

        /// <summary>
        /// The additional freight charges in base currency for handling the order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("premiumAmountInBaseCurrency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double PremiumAmountInBaseCurrency { get; set; }

        /// <summary>
        /// The amounts calculated based on the ship terms.
        /// <br/>///
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        /// <summary>
        /// The amounts calculated based on the ship terms in base currency of the order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amountInBaseCurrency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double AmountInBaseCurrency { get; set; }

        /// <summary>
        /// The tax category that applies to the freight amount.
        /// <br/>By default, it is the tax category associated with the ship via code selected for the order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxCategoryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaxCategoryId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesOrderLineDto
    {
        /// <summary>
        /// The line number of the sales order line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lineId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int LineId { get; set; }

        /// <summary>
        /// Used to apply sort order to a set of lines
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortOrder { get; set; }

        /// <summary>
        /// The type of sales order line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lineType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LineType { get; set; }

        /// <summary>
        /// The type of operation the line represents to the order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Operation { get; set; }

        /// <summary>
        /// The date the order line was added
        /// <br/>Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OrderDate { get; set; }

        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CdDescriptionPairDto Branch { get; set; }

        [Newtonsoft.Json.JsonProperty("inventory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SalesOrderLineInventoryDto Inventory { get; set; }

        /// <summary>
        /// The unit of measure (UOM) for the sales order line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unitOfMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitOfMeasure { get; set; }

        /// <summary>
        /// The quantity of unit of measure this line represents
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Quantity { get; set; }

        /// <summary>
        /// The base order quantity for this line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("baseOrderQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BaseOrderQuantity { get; set; }

        /// <summary>
        /// The unit cost of items on this order line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unitCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnitCost { get; set; }

        /// <summary>
        /// The unit price for items on this order line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnitPrice { get; set; }

        /// <summary>
        /// Any description for this order line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The shipping rule code for this order line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shippingRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShippingRule { get; set; }

        /// <summary>
        /// Whether this order line is completed or not
        /// </summary>
        [Newtonsoft.Json.JsonProperty("completed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Completed { get; set; }

        /// <summary>
        /// The extended price for this sales order line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extendedPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExtendedPrice { get; set; }

        /// <summary>
        /// The line total before any discounts are applied
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lineTotalBeforeDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LineTotalBeforeDiscount { get; set; }

        /// <summary>
        /// The excise duty amount for this line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exciseDuty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExciseDuty { get; set; }

        /// <summary>
        /// The discount amount for this line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discountAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DiscountAmount { get; set; }

        /// <summary>
        /// Any external link for this sales order line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalLink { get; set; }

        /// <summary>
        /// The Tax Category Id applying to this order line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxCategoryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaxCategoryId { get; set; }

        /// <summary>
        /// The reason code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reasonCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReasonCode { get; set; }

        /// <summary>
        /// The Site Id for items on this line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("warehouseId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WarehouseId { get; set; }

        /// <summary>
        /// The undership threshold value (%)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("undershipThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UndershipThreshold { get; set; }

        /// <summary>
        /// The overship threshold value (%)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("overshipThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OvershipThreshold { get; set; }

        /// <summary>
        /// The expected shipping date for this order line
        /// <br/>Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ShipDate { get; set; }

        /// <summary>
        /// The request date for this order line
        /// <br/>Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RequestDate { get; set; }

        /// <summary>
        /// Any note that has been applied to this order line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note { get; set; }

        /// <summary>
        /// The general ledger account this line applies to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salesAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalesAccountId { get; set; }

        /// <summary>
        /// The general ledger subaccount this line applies to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subaccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Subaccount { get; set; }

        /// <summary>
        /// The open quantity for this line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("openQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OpenQuantity { get; set; }

        /// <summary>
        /// The billed quantity for this line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("billedQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BilledQuantity { get; set; }

        /// <summary>
        /// The quantity on shipments for this line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantityOnShipments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? QuantityOnShipments { get; set; }

        /// <summary>
        /// Discount percentage applied to this line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discountPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DiscountPercent { get; set; }

        /// <summary>
        /// Code of discount applied to this line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discountCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DiscountCode { get; set; }

        /// <summary>
        /// Id of discount sequence applied to this line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discountSequenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DiscountSequenceId { get; set; }

        /// <summary>
        /// Discount is applied manually
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasManualDiscount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasManualDiscount { get; set; }

        /// <summary>
        /// Whether these item(s) are free or not
        /// </summary>
        [Newtonsoft.Json.JsonProperty("freeItem", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool FreeItem { get; set; }

        [Newtonsoft.Json.JsonProperty("warehouseLocation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationDto WarehouseLocation { get; set; }

        /// <summary>
        /// The replacement unit cost of an item. This is set based on the supplier price.
        /// <br/>If no supplier price found, the last price of the item's default supplier will be used.
        /// <br/>If no default supplier is set, the last cost of the item will be used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("replacementUnitCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ReplacementUnitCost { get; set; }

        /// <summary>
        /// Unit price is applied manually
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasManualPrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasManualPrice { get; set; }

        [Newtonsoft.Json.JsonProperty("inventoryAlternateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InventoryAlternateId { get; set; }

        /// <summary>
        /// Indicates if line has quantity left to be shipped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("openLine", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool OpenLine { get; set; }

        /// <summary>
        /// Indicates if line is comissionable
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commissionable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Commissionable { get; set; }

        [Newtonsoft.Json.JsonProperty("salesPerson", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SalesPersonDto SalesPerson { get; set; }

        /// <summary>
        /// Information about line purchase order source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purchaseOrderSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurchaseOrderSource { get; set; }

        [Newtonsoft.Json.JsonProperty("supplier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SupplierDto Supplier { get; set; }

        [Newtonsoft.Json.JsonProperty("supplierPrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.Obsolete]
        public double SupplierPrice { get; set; }

        /// <summary>
        /// The project task with which this sales order line is associated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectTaskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectTaskId { get; set; }

        /// <summary>
        /// The attachments associated with this sales order line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AttachmentDto> Attachments { get; set; }

        /// <summary>
        /// The purchase order numbers that are linked to the sales order line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purchaseOrderNumbers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> PurchaseOrderNumbers { get; set; }

        [Newtonsoft.Json.JsonProperty("isRotRutDeductible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsRotRutDeductible { get; set; }

        [Newtonsoft.Json.JsonProperty("rotRutWorkType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RotRutWorkType { get; set; }

        [Newtonsoft.Json.JsonProperty("rotRutDeductibleAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double RotRutDeductibleAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("rotRutItemType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CdDescriptionPairDto RotRutItemType { get; set; }

        /// <summary>
        /// Indicates if an order line of issue type will automatically be created after the order line of receipt type has been processed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autoCreateIssue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AutoCreateIssue { get; set; }

        /// <summary>
        /// The line number of the original invoice to be returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceLineNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InvoiceLineNumber { get; set; }

        /// <summary>
        /// The reference number of the original invoice to be returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceNumber { get; set; }

        /// <summary>
        /// The invoice type of the original invoice to be returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceType { get; set; }

        [Newtonsoft.Json.JsonProperty("kitAssembly", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public KitAssemblyDto KitAssembly { get; set; }

        [Newtonsoft.Json.JsonProperty("customFields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomFieldsDto CustomFields { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesOrderLineDtoPagedResult
    {
        /// <summary>
        /// Gets or sets the items that are paged
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SalesOrderLineDto> Value { get; set; }

        /// <summary>
        /// Gets or sets the link to the next page with more results. If set to null then no more records are present.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPage { get; set; }

        /// <summary>
        /// Gets or sets the total number of items available. If set to null, then the total number of items cannot be determined
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalCount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesOrderLineInventoryDto
    {
        /// <summary>
        /// The id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("baseUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BaseUnit { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesOrderListDto
    {
        /// <summary>
        /// Links applicable for the dto
        /// </summary>
        [Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, DtoLink> _links { get; set; }

        /// <summary>
        /// The type of the order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// The order id (a.k.a OrderCd) for the order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderId { get; set; }

        /// <summary>
        /// The current status of the order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>
        /// The order date
        /// <br/>Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Date { get; set; }

        /// <summary>
        /// The date shipment is scheduled
        /// <br/>Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shippingScheduledDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset ShippingScheduledDate { get; set; }

        /// <summary>
        /// The customer Id for the order (a.k.a CustoemrCd)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }

        /// <summary>
        /// The name of the customer as it appears on the order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        /// <summary>
        /// The total number of items on the order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderQty", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double OrderQty { get; set; }

        /// <summary>
        /// The total amount on the order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderTotal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double OrderTotal { get; set; }

        /// <summary>
        /// The tax total
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxTotal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TaxTotal { get; set; }

        /// <summary>
        /// The currency id for the order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        /// <summary>
        /// The customer location for this order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location { get; set; }

        /// <summary>
        /// The date the order is requested
        /// <br/>Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestOn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset RequestOn { get; set; }

        /// <summary>
        /// The customer order link
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerOrder { get; set; }

        /// <summary>
        /// The order reference number of the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerRefNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerRefNo { get; set; }

        /// <summary>
        /// Any description on the order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The date and time the order was last modified
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset LastModified { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesOrderListDtoPagedResult
    {
        /// <summary>
        /// Gets or sets the items that are paged
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SalesOrderListDto> Value { get; set; }

        /// <summary>
        /// Gets or sets the link to the next page with more results. If set to null then no more records are present.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPage { get; set; }

        /// <summary>
        /// Gets or sets the total number of items available. If set to null, then the total number of items cannot be determined
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalCount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesOrderOriginDto
    {
        /// <summary>
        /// Links applicable for the dto
        /// </summary>
        [Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, DtoLink> _links { get; set; }

        /// <summary>
        /// The order type code for the origin order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderType { get; set; }

        /// <summary>
        /// The unique id of the origin order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesOrderPaymentDto
    {
        [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CdDescriptionPairDto PaymentMethod { get; set; }

        /// <summary>
        /// The cash account to use
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cashAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CashAccountId { get; set; }

        /// <summary>
        /// The payment reference
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentReference { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesOrderPrintDto
    {
        /// <summary>
        /// Set to true to print description on the invoice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("descriptionOnInvoice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DescriptionOnInvoice { get; set; }

        /// <summary>
        /// Set to true to print note on internal documents
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noteOnInternalDocuments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NoteOnInternalDocuments { get; set; }

        /// <summary>
        /// Set to true to print note on external documents
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noteOnExternalDocuments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NoteOnExternalDocuments { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesOrderRotRutDistributionDto
    {
        /// <summary>
        /// Reference to the order line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lineId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int LineId { get; set; }

        /// <summary>
        /// The personal id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonalId { get; set; }

        /// <summary>
        /// The amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        /// <summary>
        /// Whether this is extra or not
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extra", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Extra { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesOrderRotRutDto
    {
        /// <summary>
        /// Whether the ROT/RUT is distributed automatically
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distributedAutomatically", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DistributedAutomatically { get; set; }

        /// <summary>
        /// The type of ROT/RUT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// The apartment reference
        /// </summary>
        [Newtonsoft.Json.JsonProperty("apartment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Apartment { get; set; }

        /// <summary>
        /// The estate reference
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Estate { get; set; }

        /// <summary>
        /// The organization number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("organizationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrganizationNumber { get; set; }

        /// <summary>
        /// The total amount that is tax deductable
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalDeductableAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalDeductableAmount { get; set; }

        /// <summary>
        /// Cost amount for lines with inventory ROT/RUT item type OtherCost
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherCostAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OtherCostAmount { get; set; }

        /// <summary>
        /// Cost amount for lines with inventory ROT/RUT item type Material
        /// </summary>
        [Newtonsoft.Json.JsonProperty("materialCostAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaterialCostAmount { get; set; }

        /// <summary>
        /// Price amount for lines with inventory ROT/RUT item type Service
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workPriceAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WorkPriceAmount { get; set; }

        /// <summary>
        /// The total amount distributed among the specified personal IDs
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distributedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DistributedAmount { get; set; }

        /// <summary>
        /// The distrinbution entries
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distribution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SalesOrderRotRutDistributionDto> Distribution { get; set; }

    }

    /// <summary>
    /// The Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderShipmentDto specifies a shipment line detail for a sales order
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesOrderShipmentDto
    {
        /// <summary>
        /// The type of the shipment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// The id of a shipments created for the order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The date of the shipment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Date { get; set; }

        /// <summary>
        /// The quantity of goods on the shipment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Quantity { get; set; }

        /// <summary>
        /// The weight of the shipped goods
        /// </summary>
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Weight { get; set; }

        /// <summary>
        /// The volume of the shipped goods
        /// </summary>
        [Newtonsoft.Json.JsonProperty("volume", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Volume { get; set; }

        /// <summary>
        /// The type of invoice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceType { get; set; }

        /// <summary>
        /// The id of the invoice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceId { get; set; }

        /// <summary>
        /// The type of inventory document created for the shipment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inventoryDocumentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InventoryDocumentType { get; set; }

        /// <summary>
        /// The id of the inventory document created for the shipment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inventoryReferenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InventoryReferenceId { get; set; }

        /// <summary>
        /// The status of the shipment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesOrderShippingDto
    {
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactDto Contact { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressDto Address { get; set; }

        /// <summary>
        /// The shipping scheduled date
        /// <br/>Unless a specific time zone offset is included (e.g. '2012-12-24T00:00:00+02:00'), the passed date is considered to be in the UTC time zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduledDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ScheduledDate { get; set; }

        /// <summary>
        /// Whether this order can/is shipped separately
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipSeparately", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ShipSeparately { get; set; }

        /// <summary>
        /// The shipping rule
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rule { get; set; }

        [Newtonsoft.Json.JsonProperty("preferredWarehouse", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CdDescriptionPairDto PreferredWarehouse { get; set; }

        [Newtonsoft.Json.JsonProperty("shipVia", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CdDescriptionPairDto ShipVia { get; set; }

        [Newtonsoft.Json.JsonProperty("fobPoint", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CdDescriptionPairDto FobPoint { get; set; }

        [Newtonsoft.Json.JsonProperty("terms", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CdDescriptionPairDto Terms { get; set; }

        [Newtonsoft.Json.JsonProperty("zone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CdDescriptionPairDto Zone { get; set; }

        /// <summary>
        /// Whether this is residential delivery
        /// </summary>
        [Newtonsoft.Json.JsonProperty("residentialDelivery", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ResidentialDelivery { get; set; }

        /// <summary>
        /// Whether this is a saturday delivery
        /// </summary>
        [Newtonsoft.Json.JsonProperty("saturdayDelivery", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SaturdayDelivery { get; set; }

        /// <summary>
        /// Whether insurance applies to this shipping
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insurance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Insurance { get; set; }

        [Newtonsoft.Json.JsonProperty("intrastatTransactionType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IdDescriptionPairDto IntrastatTransactionType { get; set; }

        /// <summary>
        /// Priority of the order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Priority { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesOrderStatusDto
    {
        /// <summary>
        /// The status code for the order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Whether this order is in a cancelled state
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cancelled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Cancelled { get; set; }

        /// <summary>
        /// Whether this order is in a held state
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hold", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Hold { get; set; }

    }

    /// <summary>
    /// The Visma.net.ERP.SalesOrders.Api.Dto.SalesOrder.SalesOrderTaxDto specifies a tax line detail for a sales order
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesOrderTaxDto
    {
        /// <summary>
        /// The unique tax identifier of the specific tax applied to the document
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaxId { get; set; }

        /// <summary>
        /// The tax rate used for the tax
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxRate { get; set; }

        /// <summary>
        /// The calculated taxable amount for the specific tax
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxableAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxableAmount { get; set; }

        /// <summary>
        /// The calculated tax amount for the specific tax
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxAmount { get; set; }

        /// <summary>
        /// Indicates if the taxable amount will be included in taxExemptTotal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exemptTax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ExemptTax { get; set; }

        /// <summary>
        /// Indicates if the taxable amount will be included in taxableTotal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("includeInTaxable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IncludeInTaxable { get; set; }

        /// <summary>
        /// Indicates if the tax calculated is treated as a pending tax
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isPendingTax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsPendingTax { get; set; }

        /// <summary>
        /// Indicates if the tax calculated is treated as a statistical tax
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isStatisticalTax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsStatisticalTax { get; set; }

        /// <summary>
        /// Indicates if the tax is treated as a reverse tax
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReverseTax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsReverseTax { get; set; }

        /// <summary>
        /// The type of tax, which can be Sales, Use, VAT or Withholding
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaxType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesOrderTotalsDto
    {
        /// <summary>
        /// The order total
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderTotal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double OrderTotal { get; set; }

        /// <summary>
        /// The order total in base currency
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderTotalInBaseCurrency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double OrderTotalInBaseCurrency { get; set; }

        /// <summary>
        /// The VAT taxable total
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxableTotal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TaxableTotal { get; set; }

        /// <summary>
        /// The VAT taxable in base currency
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxableTotalInBaseCurrency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TaxableTotalInBaseCurrency { get; set; }

        /// <summary>
        /// The VAT exempt total
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxExemptTotal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TaxExemptTotal { get; set; }

        /// <summary>
        /// The VAT exempt total in base currency
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxExemptTotalInBaseCurrency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TaxExemptTotalInBaseCurrency { get; set; }

        /// <summary>
        /// The tax total
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxTotal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TaxTotal { get; set; }

        /// <summary>
        /// The tax total in base currency
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxTotalInBaseCurrency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TaxTotalInBaseCurrency { get; set; }

        /// <summary>
        /// The discount total
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discountTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DiscountTotal { get; set; }

        /// <summary>
        /// The discount total in base currency
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discountTotalInBaseCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DiscountTotalInBaseCurrency { get; set; }

        /// <summary>
        /// The total of the costs on the lines of the sales order. How the `costTotal` is calculated is dependent on the option `useReplacementCostForMarginAndProfit`.
        /// <br/>If this option is `true` the `costTotal` will be calculated based on the `replacementUnitCost`.
        /// <br/>If this option is `false`, the `costTotal` will be calculate based on `unitCost`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("costTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CostTotal { get; set; }

        /// <summary>
        /// The total of the costs on the lines of the sales order in base currency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("costTotalInBaseCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CostTotalInBaseCurrency { get; set; }

        /// <summary>
        /// The freight cost calculated for the sales order. Not applicable for transfer order types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("freightCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FreightCost { get; set; }

        /// <summary>
        /// The freight cost calculated for the sales order in base currency. Not applicable for transfer order types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("freightCostInBaseCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FreightCostInBaseCurrency { get; set; }

        /// <summary>
        /// The freight amount calculated in accordance with the shipping terms. Not applicable for transfer order types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("freightTotal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double FreightTotal { get; set; }

        /// <summary>
        /// The freight amount calculated in accordance with the shipping terms in base currency. Not applicable for transfer order types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("freightTotalInBaseCurrency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double FreightTotalInBaseCurrency { get; set; }

        /// <summary>
        /// The sum of unbilled amounts for the lines
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unbilledAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double UnbilledAmount { get; set; }

        /// <summary>
        /// The sum of unbilled amounts for the lines in base currency
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unbilledAmountInBaseCurrency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double UnbilledAmountInBaseCurrency { get; set; }

        /// <summary>
        /// The sum of unshipped amounts for the lines
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unshippedAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double UnshippedAmount { get; set; }

        /// <summary>
        /// The sum of unshipped amounts for the lines in base currency
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unshippedAmountInBaseCurrency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double UnshippedAmountInBaseCurrency { get; set; }

        /// <summary>
        /// The total amount of payments connected to the order in the order currency
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PaymentTotal { get; set; }

        /// <summary>
        /// The total amount of payments connected to the order in the base currency
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentTotalInBaseCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PaymentTotalInBaseCurrency { get; set; }

    }

    /// <summary>
    /// Defines an error response for validation problems
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesOrderValidationProblemDetails
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }

        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instance { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> Errors { get; set; }

        /// <summary>
        /// List with details for all the validation problems
        /// </summary>
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ValidationErrorCodeDetails> Details { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesPersonDto
    {
        /// <summary>
        /// The id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SupplierDto
    {
        /// <summary>
        /// The id of the supplier selected for the order line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the supplier selected for the order line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The currency of the supplier selected for the order line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyId { get; set; }

        /// <summary>
        /// The supplier price of the supplier selected for the order line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Price { get; set; }

    }

    /// <summary>
    /// Defines details related to validation problems
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ValidationErrorCodeDetails
    {
        /// <summary>
        /// Error code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// Detailed validation message
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// Extra parameters related to the validation problem.
        /// <br/>&lt;remarks&gt;If the validation problem refers to a particular field the "property" element will contain the field name&lt;/remarks&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Parameters { get; set; }

    }

    /// <summary>
    /// Warehouse information for a specific inventory item
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WarehouseAvailabilityDto
    {
        /// <summary>
        /// The internal id used by the system for the warehouse
        /// </summary>
        [Newtonsoft.Json.JsonProperty("internalWarehouseId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InternalWarehouseId { get; set; }

        /// <summary>
        /// The id (SiteCd) of the warehouse
        /// </summary>
        [Newtonsoft.Json.JsonProperty("warehouseId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WarehouseId { get; set; }

        /// <summary>
        /// The description of the warehouse
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Physical quantity on-hand of items in the specific warehouse
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantityOnHand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double QuantityOnHand { get; set; }

        /// <summary>
        /// You can configure the way this estimated quantity is calculated by using availability
        /// <br/>calculation rules. The available quantity may include anticipated transactions and therefore
        /// <br/>may be less than or greater than the QuantityOnHand. Anticipated transactions correspond
        /// <br/>to the documents and transactions that have been entered in the system but not yet
        /// <br/>processed to the end.
        /// <br/>In the availability calculation settings of an item class, you specify which anticipated
        /// <br/>transactions affect the available quantity. Thus, the available quantity may include
        /// <br/>goods on purchase orders and exclude the goods allocated for sales orders. You can use
        /// <br/>the available quantity as an indicator of demand
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantityAvailable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double QuantityAvailable { get; set; }

        /// <summary>
        /// Estimated quantity calculated by using the following formula: the QuantityOnHand minus the quantity on unreleased inventory
        /// <br/>issues, minus the quantity allocated for shipping. Thus, the QuantityAvailableForShipment can be less than the QuantityOnHand
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantityAvailableForShipment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double QuantityAvailableForShipment { get; set; }

        /// <summary>
        /// The quantity stored at locations not included in the availability calculation.
        /// <br/>For each warehouse location, the 'Include in Qty. Available' check box on the
        /// <br/>Warehouses(IN204000) screen defines whether the quantity of items stored at this
        /// <br/>location is included in the quantity of available items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantityNotAvailable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double QuantityNotAvailable { get; set; }

        /// <summary>
        /// The quantity of the inventory item included in open purchase orders.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantityPurchaseOrders", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double QuantityPurchaseOrders { get; set; }

        /// <summary>
        /// The estimated cost per unit, calculated as EstimatedTotalCost/QuantityOnHand
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedUnitCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? EstimatedUnitCost { get; set; }

        /// <summary>
        /// The total cost for the QuantityOnHand
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedTotalCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? EstimatedTotalCost { get; set; }

        /// <summary>
        /// The date and time the entry for this warehouse was modified
        /// <br/>Unless a specific time zone offset is included (e.g. '2012-12-24T12:15:14+02:00'), the date is considered to be in the UTC time zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset LastModified { get; set; }

        /// <summary>
        /// List of locations in the warehouse for the specific inventory item.
        /// <br/>Note that this is not returned as part of the response unless expand=Location is specified with the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LocationAvailabilityDto> Locations { get; set; }

        /// <summary>
        /// LOT/Serial information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lotSerials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LotSerialAvailabilityDto> LotSerials { get; set; }

    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SwaggerResponse
    {
        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            StatusCode = statusCode;
            Headers = headers;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SwaggerResponse<TResult> : SwaggerResponse
    {
        public TResult Result { get; private set; }

        public SwaggerResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result)
            : base(statusCode, headers)
        {
            Result = result;
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625